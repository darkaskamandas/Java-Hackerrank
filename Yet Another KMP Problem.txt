import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

	static long mod = 1000000007;
	
	static long result = 0;
	
	static class Node {
		int id;
		Set<Node> ns = new HashSet<>();
		boolean computed;
		long waysCluster = 0;
		long waysLeaf = 0;
		
		Node(int id) {
			this.id = id;
		}
		
		int getNotComputedNs() {
			int c = 0;
			for (Node n: ns) {
				if(!n.computed) c++;
			}
			return c;
		}
		
		boolean canCompute() {
			if(computed) return false;
			if(ns.size() == 1) return true;
			return getNotComputedNs() < 2;
		}
		
		void compute() {
			computed = true;
			if(ns.size() == 1 && getNotComputedNs() == 1) {
				waysCluster = 0;
				waysLeaf = 1;
				return;
			}
			long pCluster = 1;
			long pCluster2 = 1;
			long pWithLeaf = 1;
			for (Node s: ns) {
				if(!s.computed) continue;
				pCluster = (pCluster * s.waysCluster) % mod;
				pCluster2 = (2 * pCluster2 * s.waysCluster) % mod;
				pWithLeaf = (pWithLeaf * (2 * s.waysCluster + s.waysLeaf)) % mod;
			}
			
			pWithLeaf = (pWithLeaf - pCluster2 + mod) % mod;
			pCluster2 = (pCluster2 - 2 * pCluster + 2 * mod) % mod;
			
			waysCluster = (pCluster + pCluster2 + pWithLeaf);
			waysLeaf = pCluster;
			
			if(getNotComputedNs() == 0) {
				result = (waysCluster * 2) % mod;
			}
		}
		
		public int hashCode() {
			return id;
		}
		
		public boolean equals(Object o) {
			return id == ((Node)o).id;
		}
	}
	
	static Node[] nodes;
	
	static void solve() {
		Set<Node> toConsider = new HashSet<>();
		for (int i = 0; i < nodes.length; i++) {
			if(nodes[i].canCompute()) {
				nodes[i].compute();
			}
		}
		for (int i = 0; i < nodes.length; i++) {
			if(nodes[i].canCompute()) {
				toConsider.add(nodes[i]);
			}
		}
		while(!toConsider.isEmpty()) {
			Node n = toConsider.iterator().next();
			toConsider.remove(n);
			if(n.computed) continue;
			n.compute();
			for (Node s: n.ns) {
				if(s.canCompute()) {
					toConsider.add(s);
				}
			}
		}
		System.out.println(result);
	}
	
	static void init(int n) {
        nodes = new Node[n];
        for (int i = 0; i < n; i++) {
        	nodes[i] = new Node(i);
        }
	}
	static void addRoad(int u, int v) {
        nodes[u].ns.add(nodes[v]);
        nodes[v].ns.add(nodes[u]);
	}
	
	static void run() {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        init(n);
        for(int a0 = 0; a0 < n-1; a0++){
            int u = in.nextInt() - 1;
            int v = in.nextInt() - 1;
            addRoad(u, v);
         }
        solve();
	}
	
	static void test() {
		int n = 7;
		init(n);
		addRoad(0, 1);
		addRoad(0, 4);
		addRoad(1,  2);
		addRoad(1,  3);
		addRoad(6,  4);
		solve();
	}
	

    public static void main(String[] args) {
        run();
    }
}