import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static class Graph {
        private final int V;
        private int E;
        private List<Integer>[] adj;

        /**
         * Create an empty graph with V vertices.
         * 
         * @throws java.lang.IllegalArgumentException if V < 0
         */
        public Graph(int V) {
            if (V < 0)
                throw new IllegalArgumentException("Number of vertices must be nonnegative");
            this.V = V;
            this.E = 0;
            @SuppressWarnings("unchecked")
            List<Integer>[] a = (List<Integer>[]) new List[V];
            adj = a;
            for (int v = 0; v < V; v++) {
                adj[v] = new ArrayList<Integer>();
            }
        }

        /**
         * Create a random graph with V vertices and E edges. Expected running
         * time is proportional to V + E.
         * 
         * @throws java.lang.IllegalArgumentException if either V < 0 or E < 0
         */
        public Graph(int V, int E) {
            this(V);
            if (E < 0)
                throw new IllegalArgumentException("Number of edges must be nonnegative");
            for (int i = 0; i < E; i++) {
                int v = (int) (Math.random() * V);
                int w = (int) (Math.random() * V);
                addEdge(v, w);
            }
        }

        /**
         * Create a digraph from input stream.
         */
        public Graph(Scanner scanner) {
            this(scanner.nextInt() + 1);
            int E = scanner.nextInt();
            for (int i = 0; i < E; i++) {
                int v = scanner.nextInt();
                int w = scanner.nextInt();
                addEdge(v, w);
            }
        }

        /**
         * Return the number of vertices in the graph.
         */
        public int V() {
            return V;
        }

        /**
         * Return the number of edges in the graph.
         */
        public int E() {
            return E;
        }

        /**
         * Add the undirected edge v-w to graph.
         * 
         * @throws java.lang.IndexOutOfBoundsException
         *             unless both 0 <= v < V and 0 <= w < V
         */
        public void addEdge(int v, int w) {
            if (v < 0 || v >= V)
                throw new IndexOutOfBoundsException();
            if (w < 0 || w >= V)
                throw new IndexOutOfBoundsException();
            E++;
            adj[v].add(w);
            adj[w].add(v);
        }

        public void removeEdge(int v, int w) {
            if (v < 0 || v >= V)
                throw new IndexOutOfBoundsException();
            if (w < 0 || w >= V)
                throw new IndexOutOfBoundsException();
            --E;
            adj[v].remove((Integer) w);
            adj[w].remove((Integer) v);
        }

        /**
         * Return the list of neighbors of vertex v as in Iterable.
         * 
         * @throws java.lang.IndexOutOfBoundsException
         *             unless 0 <= v < V
         */
        public List<Integer> adj(int v) {
            if (v < 0 || v >= V)
                throw new IndexOutOfBoundsException();
            return adj[v];
        }
        
        public boolean connected(int v, int u) {
            return adj[v].contains(u);
        }
    }
    
    private static final long MOD = 1000000007;
    
    private static TreeMap<Integer, Long> cache = new TreeMap<Integer, Long>();
    
    private static long factorial(int n) {
        Long f = cache.get(n);
        if (f == null) {
            Map.Entry<Integer, Long> e = cache.floorEntry(n);
            int p = (e == null) ? 1 : e.getKey();
            f = (e == null) ? 1 : e.getValue();
            while (p < n) {
                f = (f * (p + 1)) % MOD;
                cache.put(p + 1, f);
                ++p;
            }
        }
        return f;
    }
    
    private static long count(Graph g, int v, int prev) {
        List<Integer> a = g.adj(v);
        
        int moreThanOneNeighbourVertex = -1;
        for (int u : a) {
            if (u == prev) {
                continue;
            }
            List<Integer> uadj = g.adj(u);
            if (uadj.size() > 1) {
                if (moreThanOneNeighbourVertex != -1) {
                    return 0;
                }
                moreThanOneNeighbourVertex = u;
            }
        }
        
        long count = 1;

        if (moreThanOneNeighbourVertex != -1) {
            count = count(g, moreThanOneNeighbourVertex, v);
        }
        
        int s = a.size() - 1 - (moreThanOneNeighbourVertex != -1 ? 1 : 0);
        
        return (count * factorial(s)) % MOD;
    }
    
    private static long count(Graph g) {
        int p = 0, prev = -1;
        while (g.adj(p).size() == (prev == -1 ? 1 : 0)) {
            prev = p;
            p = g.adj(p).get(0);
        }
        
        return countFromStart(g, p, prev);
    }
        
        
    private static long countFromStart(Graph g, int v, int prev) {
        List<Integer> a = g.adj(v);
        
        int moreThanOneNeighbourVertex1 = -1;
        int moreThanOneNeighbourVertex2 = -1;
        
        for (int u : a) {
            if (u == prev) {
                continue;
            }
            List<Integer> uadj = g.adj(u);
            if (uadj.size() > 1) {
                if (moreThanOneNeighbourVertex1 != -1 && moreThanOneNeighbourVertex2 != -1) {
                    return 0;
                }
                if (moreThanOneNeighbourVertex1 != -1) {
                    moreThanOneNeighbourVertex2 = u;
                }
                else {
                    moreThanOneNeighbourVertex1 = u;
                }
            }
        }
        
        long count = 1;

        if (moreThanOneNeighbourVertex1 != -1 && moreThanOneNeighbourVertex2 != -1) {
            long c1 = count(g, moreThanOneNeighbourVertex1, v);
            long c2 = count(g, moreThanOneNeighbourVertex2, v);
            int s = a.size() - 2;
            count = (count * c1) % MOD;
            count = (count * c2) % MOD;
            count = (count * factorial(s)) % MOD;
            count = (count * 2) % MOD;
        }
        else if (moreThanOneNeighbourVertex1 != -1) {
            long c1 = count(g, moreThanOneNeighbourVertex1, v);
            int s = a.size() - 1;
            count = (c1 * factorial(s)) % MOD;
            count = (count * 2) % MOD;
        }
        else {
            count = factorial(a.size());
        }
        
        return count;
    }

    public static void main(String[] args) throws FileNotFoundException {
        Scanner scanner;
        if (args.length == 0) {
            scanner = new Scanner(new BufferedInputStream(System.in));
        }
        else {
            scanner = new Scanner(new BufferedInputStream(new FileInputStream(args[0])));
        }
        int t = scanner.nextInt();
        for (int i = 0; i < t; ++i) {
            int n = scanner.nextInt();
            Graph g = new Graph(n);
            for (int j = 0; j < n - 1; ++j) {
                int u = scanner.nextInt();
                int v = scanner.nextInt();
                g.addEdge(u, v);
            }
            System.out.println(count(g));
        }
    }
}