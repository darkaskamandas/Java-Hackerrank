
class SumInLeavesVisitor extends TreeVis {

    private int sum = 0;

    public int getResult() {
        return sum;
    }

    public void visitNode(TreeNode node) {
        //does nothing
    }

    public void visitLeaf(TreeLeaf leaf) {
        sum += leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {

    private long product = 1;
    private long mod = 1000000007;

    public int getResult() {
        return (int) product;
    }

    public void visitNode(TreeNode node) {
        if (node.getColor() == Color.RED) {
            int value = node.getValue();
            if (value == 0) {
                value = 1;
            }
            product = (product * value) % mod;
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        if (leaf.getColor() == Color.RED) {
            int value = leaf.getValue();
            if (value == 0) {
                value = 1;
            }
            product = (product * value) % mod;
        }
    }
}

class FancyVisitor extends TreeVis {

    private int sum1 = 0;
    private int sum2 = 0;

    public int getResult() {
        return Math.abs(sum1 - sum2);
    }

    public void visitNode(TreeNode node) {
        if (node.getDepth() % 2 == 0) {
            sum1 += node.getValue();
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        if (leaf.getColor() == Color.GREEN) {
            sum2 += leaf.getValue();
        }
    }
}
@SuppressWarnings("unchecked")
public class Solution {

    public static Tree solve() {
        try {
            //read the tree from STDIN and return its root as a return value of this function
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//            BufferedReader br = new BufferedReader(new FileReader("data.txt"));
            int n = Integer.parseInt(br.readLine());
            String[] sNodes = br.readLine().split(" ");
            String[] sColors = br.readLine().split(" ");
            String[] sArr;
//            int[] depth = new int[n + 1];
            Set<Integer>[] v = (Set<Integer>[]) new Set[n + 1];
            for (int i = 1; i <= n; i++) {
//                depth[i] = -1;
                v[i] = new HashSet<>();
            }
            int a, b;
            for (int i = 1; i < n; i++) { //n-1 edges
                sArr = br.readLine().split(" ");
                a = Integer.parseInt(sArr[0]);
                b = Integer.parseInt(sArr[1]);
                v[a].add(b);
                v[b].add(a);
//                if(depth[a] == -1) {
//                    if(depth[b] != -1) {
//                        depth[a] = depth[b] + 1;
//                    }
//                } else if(depth[b] == -1) {
//                    if(depth[a] != -1) {
//                        depth[b] = depth[a] + 1;
//                    }
//                }
            }
            boolean[] visited = new boolean[n + 1];
            Deque<Integer> queue = new ArrayDeque<>();
            Tree[] nodes = new Tree[n + 1];
            int num = 1;
            visited[num] = true;
            queue.offer(num);
            nodes[num] = new TreeNode(Integer.parseInt(sNodes[0]),
                    Integer.parseInt(sColors[0]) == 0 ? Color.RED : Color.GREEN,
                    0);

            while (!queue.isEmpty()) {
                num = queue.poll();
                for (Integer item : v[num]) {
                    if (!visited[item]) {
                        visited[item] = true;
                        queue.offer(item);
                        if(nodes[item] == null) {
                            if (item != 1 && v[item].size() == 1) { //leaf
                                nodes[item] = new TreeLeaf(Integer.parseInt(sNodes[item - 1]),
                                        Integer.parseInt(sColors[item - 1]) == 0 ? Color.RED : Color.GREEN,
                                        nodes[num].getDepth() + 1);
                            } else {  //node
                                nodes[item] = new TreeNode(Integer.parseInt(sNodes[item - 1]),
                                        Integer.parseInt(sColors[item - 1]) == 0 ? Color.RED : Color.GREEN,
                                        nodes[num].getDepth() + 1);
                            }
                        }
                        if(nodes[num] instanceof TreeNode) {
                            ((TreeNode)nodes[num]).addChild(nodes[item]);
                        }
                    }
                }
            }

            return nodes[1];

        } catch (IOException ex) {
            ex.printStackTrace(System.err);
            return null;
        }
    }